#!/usr/bin/env python3
"""
üñ•Ô∏è CLI Workflow Demo - Interactive Dubbing with Provider Selection

This script simulates the enhanced Hungarian CLI interface with 
multi-provider TTS support, demonstrating the complete dubbing
workflow from video input to final output.

Usage:
    python examples/cli_workflow_demo.py --interactive
"""

import argparse
import asyncio
import time
import json
from typing import Dict, List, Tuple, Optional
from dataclasses import dataclass
import random

@dataclass
class VideoInfo:
    url: str
    title: str
    duration: str
    transcript_chars: int
    language: str

@dataclass
class TTSProvider:
    id: str
    name: str
    cost_per_1k_chars: float
    voice_count: int
    languages: int
    recommended: bool

@dataclass
class VoiceOption:
    id: str
    name: str
    gender: str
    description: str
    provider: str
    cost_per_1k_chars: float

class HungarianCLIDemo:
    """Simulate the Hungarian CLI interface with TTS provider selection"""
    
    def __init__(self):
        self.providers = self._initialize_providers()
        self.voices = self._initialize_voices()
        self.selected_provider = None
        self.selected_voice = None
        
    def _initialize_providers(self) -> Dict[str, TTSProvider]:
        """Initialize TTS providers"""
        return {
            "elevenlabs": TTSProvider(
                id="elevenlabs",
                name="ElevenLabs - Pr√©mium neur√°lis hangok (dr√°ga)",
                cost_per_1k_chars=0.30,
                voice_count=25,
                languages=29,
                recommended=False
            ),
            "google_tts": TTSProvider(
                id="google_tts", 
                name="Google Cloud TTS - Kiv√°l√≥ min≈ës√©g (90% olcs√≥bb)",
                cost_per_1k_chars=0.016,
                voice_count=1616,
                languages=40,
                recommended=True
            ),
            "auto": TTSProvider(
                id="auto",
                name="Automatikus kiv√°laszt√°s k√∂lts√©g alapj√°n",
                cost_per_1k_chars=0.016,  # Will use Google TTS
                voice_count=1641,  # Combined
                languages=40,
                recommended=True
            )
        }
    
    def _initialize_voices(self) -> Dict[str, List[VoiceOption]]:
        """Initialize voice options by provider"""
        return {
            "google_tts": [
                VoiceOption("hu-HU-Neural2-A", "Magyar Neural2 N≈ëi A", "n≈ëi", 
                           "Tiszta, term√©szetes, professzion√°lis", "google_tts", 0.016),
                VoiceOption("hu-HU-Neural2-B", "Magyar Neural2 F√©rfi B", "f√©rfi",
                           "Tekint√©lyteljes, vil√°gos, megb√≠zhat√≥", "google_tts", 0.016),
                VoiceOption("hu-HU-Wavenet-A", "Magyar WaveNet N≈ëi A", "n≈ëi",
                           "Meleg, besz√©lget≈ës, bar√°ts√°gos", "google_tts", 0.016),
                VoiceOption("en-US-Neural2-F", "Angol Neural2 N≈ëi F", "n≈ëi",
                           "Professzion√°lis, vil√°gos, oktat√°si", "google_tts", 0.016),
                VoiceOption("en-US-Neural2-D", "Angol Neural2 F√©rfi D", "f√©rfi", 
                           "Besz√©lget≈ës, meleg, vonz√≥", "google_tts", 0.016)
            ],
            "elevenlabs": [
                VoiceOption("21m00Tcm4TlvDq8ikWAM", "Rachel", "n≈ëi",
                           "Nyugodt, vil√°gos, professzion√°lis", "elevenlabs", 0.30),
                VoiceOption("pNInz6obpgDQGcFmaJgB", "Adam", "f√©rfi",
                           "M√©ly, tekint√©lyteljes, magabiztos", "elevenlabs", 0.30),
                VoiceOption("yoZ06aMxZJJ28mfd3POQ", "Sam", "f√©rfi",
                           "Bar√°ts√°gos, besz√©lget≈ës, energikus", "elevenlabs", 0.30),
                VoiceOption("EXAVITQu4vr4xnSDxMaL", "Bella", "n≈ëi",
                           "Bar√°ts√°gos, megk√∂zel√≠thet≈ë, sokoldal√∫", "elevenlabs", 0.30)
            ]
        }
    
    def print_header(self):
        """Print CLI header"""
        print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                   üé§ YouTube Vide√≥ Dubbing Szolg√°ltat√°s                      ‚ïë
‚ïë                        Enhanced Multi-Provider TTS                           ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üá≠üá∫ Magyar nyelv≈± interakt√≠v fel√ºlet
üåç T√∂bbnyelv≈± szinkroniz√°l√°s t√°mogat√°s  
üí∞ K√∂lts√©goptimaliz√°lt TTS szolg√°ltat√≥k
üé≠ 1600+ hang k√∂z√ºl v√°laszthat
        """)
    
    def get_video_info(self, url: str) -> VideoInfo:
        """Simulate getting video information"""
        # Simulate video analysis
        sample_videos = [
            VideoInfo(url, "Magyar T√∂rt√©nelem Dokumentumfilm", "25:30", 18750, "hu-HU"),
            VideoInfo(url, "Technol√≥giai Startup Bemutat√≥", "12:15", 9000, "hu-HU"),
            VideoInfo(url, "F≈ëz√©si √ötmutat√≥", "18:45", 13500, "hu-HU"),
            VideoInfo(url, "Tudom√°nyos Magyar√°zat", "8:30", 6250, "hu-HU"),
            VideoInfo(url, "Term√©k √ârt√©kel√©s", "15:20", 11250, "hu-HU")
        ]
        
        # Return random sample video
        video = random.choice(sample_videos)
        video.url = url  # Use the provided URL
        return video
    
    def display_video_info(self, video: VideoInfo):
        """Display video information"""
        print(f"\nüìπ VIDE√ì INFORM√ÅCI√ìK")
        print(f"{'='*50}")
        print(f"URL: {video.url}")
        print(f"C√≠m: {video.title}")
        print(f"Id≈ëtartam: {video.duration}")
        print(f"Becs√ºlt karaktersz√°m: {video.transcript_chars:,}")
        print(f"Eredeti nyelv: {video.language}")
    
    def select_tts_provider(self) -> str:
        """Interactive TTS provider selection"""
        print(f"\nüé§ TTS SZOLG√ÅLTAT√ì KIV√ÅLASZT√ÅSA")
        print(f"{'='*50}")
        
        # Display provider options
        providers_list = list(self.providers.values())
        for i, provider in enumerate(providers_list, 1):
            star = "‚≠ê" if provider.recommended else "  "
            print(f"{star} {i}. {provider.name}")
            print(f"      K√∂lts√©g: ${provider.cost_per_1k_chars:.3f}/1000 karakter")
            print(f"      Hangok: {provider.voice_count}")
            print(f"      Nyelvek: {provider.languages}")
            print()
        
        # Cost comparison
        print(f"üí∞ K√ñLTS√âG √ñSSZEHASONL√çT√ÅS (1000 karakter alapj√°n)")
        print(f"{'-'*60}")
        print(f"{'Szolg√°ltat√≥':<25} {'K√∂lts√©g':<12} {'√âves megtakar√≠t√°s':<20}")
        print(f"{'-'*60}")
        
        elevenlabs_cost = self.providers["elevenlabs"].cost_per_1k_chars
        for provider in providers_list:
            cost = provider.cost_per_1k_chars
            if provider.id != "elevenlabs":
                annual_savings = (elevenlabs_cost - cost) * 365  # Daily 1K chars
                savings_text = f"${annual_savings:.0f} (94%)"
            else:
                savings_text = "-"
            
            print(f"{provider.name.split(' - ')[0]:<25} "
                  f"${cost:.3f}{'':<7} "
                  f"{savings_text}")
        
        print(f"\nüí° AJ√ÅNL√ÅS: A Google Cloud TTS 94%-kal olcs√≥bb!")
        
        # Interactive selection
        while True:
            try:
                choice = input(f"\nV√°laszt√°s [1-3, alap√©rtelmezett: 3]: ").strip()
                if not choice:
                    choice = "3"  # Default to auto
                
                choice_idx = int(choice) - 1
                if 0 <= choice_idx < len(providers_list):
                    selected_provider = providers_list[choice_idx]
                    self.selected_provider = selected_provider.id
                    print(f"‚úÖ Kiv√°lasztva: {selected_provider.name}")
                    return selected_provider.id
                else:
                    print("‚ùå √ârv√©nytelen v√°laszt√°s. K√©rem v√°lasszon 1-3 k√∂z√∂tt.")
            except ValueError:
                print("‚ùå K√©rem sz√°mot adjon meg.")
            except KeyboardInterrupt:
                print("\nüëã Kil√©p√©s...")
                exit(0)
    
    def select_voice(self, provider_id: str, target_language: str) -> str:
        """Interactive voice selection"""
        print(f"\nüé≠ HANG KIV√ÅLASZT√ÅSA - {self.providers[provider_id].name.split(' - ')[0]}")
        print(f"{'='*60}")
        
        if provider_id == "auto":
            # Auto mode - show recommended voice
            print("ü§ñ Automatikus hang kiv√°laszt√°s...")
            time.sleep(1)
            
            if target_language == "hu-HU":
                recommended_voice = "hu-HU-Neural2-A"
                voice_name = "Magyar Neural2 N≈ëi A"
                provider_used = "Google TTS"
            else:
                recommended_voice = "en-US-Neural2-F" 
                voice_name = "Angol Neural2 N≈ëi F"
                provider_used = "Google TTS"
            
            print(f"‚úÖ Automatikusan kiv√°lasztva:")
            print(f"   Hang: {voice_name}")
            print(f"   Szolg√°ltat√≥: {provider_used}")
            print(f"   Indokl√°s: K√∂lts√©g-optimaliz√°lt, kiv√°l√≥ min≈ës√©g")
            
            self.selected_voice = recommended_voice
            return recommended_voice
        
        # Manual voice selection
        available_voices = self.voices.get(provider_id, [])
        
        # Filter by target language if needed
        if target_language.startswith("hu"):
            available_voices = [v for v in available_voices if v.id.startswith("hu")]
        elif target_language.startswith("en"):
            available_voices = [v for v in available_voices if v.id.startswith("en")]
        
        if not available_voices:
            print("‚ùå Nincsenek el√©rhet≈ë hangok ehhez a nyelvhez.")
            return ""
        
        print(f"El√©rhet≈ë hangok ({len(available_voices)} db):")
        for i, voice in enumerate(available_voices, 1):
            print(f"{i}. {voice.name} ({voice.gender})")
            print(f"   ID: {voice.id}")
            print(f"   Le√≠r√°s: {voice.description}")
            print(f"   K√∂lts√©g: ${voice.cost_per_1k_chars:.3f}/1000 karakter")
            print()
        
        # Interactive selection
        while True:
            try:
                choice = input(f"V√°laszt√°s [1-{len(available_voices)}, Enter = 1]: ").strip()
                if not choice:
                    choice = "1"  # Default to first
                
                choice_idx = int(choice) - 1
                if 0 <= choice_idx < len(available_voices):
                    selected_voice = available_voices[choice_idx]
                    print(f"‚úÖ Kiv√°lasztva: {selected_voice.name}")
                    self.selected_voice = selected_voice.id
                    return selected_voice.id
                else:
                    print(f"‚ùå √ârv√©nytelen v√°laszt√°s. K√©rem v√°lasszon 1-{len(available_voices)} k√∂z√∂tt.")
            except ValueError:
                print("‚ùå K√©rem sz√°mot adjon meg.")
            except KeyboardInterrupt:
                print("\nüëã Kil√©p√©s...")
                exit(0)
    
    def select_target_language(self) -> str:
        """Interactive target language selection"""
        print(f"\nüåç C√âLNYELV KIV√ÅLASZT√ÅSA")
        print(f"{'='*40}")
        
        languages = [
            ("en-US", "Angol (Amerikai)", "üá∫üá∏"),
            ("en-GB", "Angol (Brit)", "üá¨üáß"), 
            ("de-DE", "N√©met", "üá©üá™"),
            ("fr-FR", "Francia", "üá´üá∑"),
            ("es-ES", "Spanyol", "üá™üá∏"),
            ("it-IT", "Olasz", "üáÆüáπ")
        ]
        
        for i, (code, name, flag) in enumerate(languages, 1):
            print(f"{i}. {flag} {name} ({code})")
        
        while True:
            try:
                choice = input(f"\nV√°laszt√°s [1-{len(languages)}, Enter = 1]: ").strip()
                if not choice:
                    choice = "1"  # Default to English
                
                choice_idx = int(choice) - 1
                if 0 <= choice_idx < len(languages):
                    selected_lang = languages[choice_idx]
                    print(f"‚úÖ Kiv√°lasztva: {selected_lang[2]} {selected_lang[1]}")
                    return selected_lang[0]
                else:
                    print(f"‚ùå √ârv√©nytelen v√°laszt√°s. K√©rem v√°lasszon 1-{len(languages)} k√∂z√∂tt.")
            except ValueError:
                print("‚ùå K√©rem sz√°mot adjon meg.")
            except KeyboardInterrupt:
                print("\nüëã Kil√©p√©s...")
                exit(0)
    
    def calculate_costs(self, video: VideoInfo, provider_id: str, target_language: str) -> Dict[str, float]:
        """Calculate processing costs"""
        provider = self.providers[provider_id]
        
        # Translation cost (fixed for all providers)
        translation_cost = video.transcript_chars * (20.0 / 1_000_000)
        
        # TTS cost based on provider
        if provider_id == "auto":
            # Auto mode uses Google TTS
            tts_cost = video.transcript_chars * (0.016 / 1000)
        else:
            tts_cost = video.transcript_chars * (provider.cost_per_1k_chars / 1000)
        
        # Video muxing cost (minimal)
        video_cost = 0.01
        
        total_cost = translation_cost + tts_cost + video_cost
        
        return {
            "translation": translation_cost,
            "tts": tts_cost,
            "video": video_cost,
            "total": total_cost
        }
    
    def display_cost_estimate(self, video: VideoInfo, provider_id: str, target_language: str):
        """Display cost estimation"""
        costs = self.calculate_costs(video, provider_id, target_language)
        
        print(f"\nüí∞ K√ñLTS√âGBECSL√âS")
        print(f"{'='*40}")
        print(f"Ford√≠t√°s ({video.transcript_chars:,} kar.): ${costs['translation']:.4f}")
        print(f"Hangszint√©zis ({self.providers[provider_id].name.split(' - ')[0]}): ${costs['tts']:.4f}")
        print(f"Vide√≥ feldolgoz√°s: ${costs['video']:.4f}")
        print(f"{'-'*40}")
        print(f"√ñSSZESEN: ${costs['total']:.4f}")
        
        # Show savings comparison
        if provider_id != "elevenlabs":
            elevenlabs_costs = self.calculate_costs(video, "elevenlabs", target_language)
            savings = elevenlabs_costs['total'] - costs['total']
            savings_pct = (savings / elevenlabs_costs['total']) * 100
            print(f"\nüí° MEGTAKAR√çT√ÅS az ElevenLabshoz k√©pest:")
            print(f"√ñsszeg: ${savings:.4f}")
            print(f"Sz√°zal√©k: {savings_pct:.1f}%")
        
        print(f"\n‚è±Ô∏è Becs√ºlt feldolgoz√°si id≈ë: {video.duration} vide√≥ ‚Üí ~{int(video.transcript_chars/1000*0.5)} perc")
    
    async def simulate_processing(self, video: VideoInfo, provider_id: str, voice_id: str, target_language: str):
        """Simulate the dubbing process"""
        print(f"\nüöÄ FELDOLGOZ√ÅS IND√çT√ÅSA")
        print(f"{'='*50}")
        
        # Processing stages
        stages = [
            ("üé¨ Vide√≥ let√∂lt√©se √©s elemz√©se", 3),
            ("üìù Magyar transcript k√©sz√≠t√©se", 5),
            ("üåç Ford√≠t√°s k√©sz√≠t√©se", 4),
            ("üé§ Hangszint√©zis", 8),
            ("üé• Vide√≥ √©s hang egyes√≠t√©se", 3),
            ("üíæ F√°jlok ment√©se", 1)
        ]
        
        print(f"Feldolgoz√°si be√°ll√≠t√°sok:")
        print(f"  üìπ Vide√≥: {video.title}")
        print(f"  üé§ Szolg√°ltat√≥: {self.providers[provider_id].name.split(' - ')[0]}")
        print(f"  üó£Ô∏è  Hang: {voice_id}")
        print(f"  üåç C√©lnyelv: {target_language}")
        print()
        
        total_progress = 0
        total_stages = sum(stage[1] for stage in stages)
        
        for stage_name, stage_duration in stages:
            print(f"‚è≥ {stage_name}...")
            
            # Simulate processing with progress bar
            for i in range(stage_duration):
                await asyncio.sleep(0.5)
                total_progress += 1
                progress_pct = (total_progress / total_stages) * 100
                
                # Simple progress bar
                filled = int(progress_pct / 5)
                bar = "‚ñà" * filled + "‚ñë" * (20 - filled)
                print(f"\r   [{bar}] {progress_pct:.1f}%", end="", flush=True)
            
            print(f" ‚úÖ")
        
        print(f"\nüéâ FELDOLGOZ√ÅS BEFEJEZVE!")
    
    def display_results(self, video: VideoInfo, provider_id: str, target_language: str):
        """Display final results"""
        costs = self.calculate_costs(video, provider_id, target_language)
        
        print(f"\nüìä EREDM√âNYEK")
        print(f"{'='*50}")
        print(f"‚úÖ Dubbing sikeresen elk√©sz√ºlt!")
        print(f"   Eredeti: {video.title} ({video.language})")
        print(f"   Szinkron: {video.title} ({target_language})")
        print(f"   Szolg√°ltat√≥: {self.providers[provider_id].name.split(' - ')[0]}")
        print(f"   Hang: {self.selected_voice}")
        print(f"   V√©gs≈ë k√∂lts√©g: ${costs['total']:.4f}")
        
        print(f"\nüìÅ LET√ñLTHET≈ê F√ÅJLOK:")
        print(f"   üéµ Szinkronhang: audio_{video.url.split('=')[-1]}_{target_language}.mp3")
        print(f"   üé¨ Szinkronvide√≥: dubbed_{video.url.split('=')[-1]}_{target_language}.mp4")
        print(f"   üìù Sz√∂vegek: transcript_{video.url.split('=')[-1]}_{target_language}.txt")
        
        print(f"\nüéØ MIN≈êS√âGI MUTAT√ìK:")
        print(f"   üé§ Hangmin≈ës√©g: Neural2 (Pr√©mium)")
        print(f"   ‚ö° Feldolgoz√°si sebess√©g: Gyors") 
        print(f"   üí∞ K√∂lts√©ghat√©konys√°g: Kiv√°l√≥")
        
        if provider_id in ["google_tts", "auto"]:
            print(f"   üèÜ 90%+ megtakar√≠t√°s az ElevenLabshoz k√©pest!")

async def main():
    """Main interactive demo"""
    parser = argparse.ArgumentParser(description="CLI Workflow Demo")
    parser.add_argument("--interactive", action="store_true", help="Run interactive demo")
    parser.add_argument("--url", default="https://youtube.com/watch?v=dQw4w9WgXcQ", 
                       help="YouTube URL for demo")
    parser.add_argument("--auto", action="store_true", help="Run with automatic selections")
    
    args = parser.parse_args()
    
    demo = HungarianCLIDemo()
    
    # Print header
    demo.print_header()
    
    if not args.interactive and not args.auto:
        print("Haszn√°lat: python cli_workflow_demo.py --interactive")
        print("   vagy: python cli_workflow_demo.py --auto")
        return
    
    try:
        # Step 1: Get video information
        print("üîç Vide√≥ inform√°ci√≥k bet√∂lt√©se...")
        time.sleep(1)
        video = demo.get_video_info(args.url)
        demo.display_video_info(video)
        
        if args.auto:
            # Automatic selections for quick demo
            provider_id = "auto"
            target_language = "en-US"
            voice_id = "en-US-Neural2-F"
            print(f"\nü§ñ Automatikus m√≥d aktiv√°lva")
            print(f"‚úÖ Szolg√°ltat√≥: Automatikus (Google TTS)")
            print(f"‚úÖ C√©lnyelv: Angol (Amerikai)")
            print(f"‚úÖ Hang: Automatikusan kiv√°lasztva")
        else:
            # Interactive selections
            if input("\nFolytatja a feldolgoz√°st? [I/n]: ").lower() not in ['n', 'nem']:
                # Step 2: Select TTS provider
                provider_id = demo.select_tts_provider()
                
                # Step 3: Select target language  
                target_language = demo.select_target_language()
                
                # Step 4: Select voice
                voice_id = demo.select_voice(provider_id, target_language)
            else:
                print("üëã Viszl√°t!")
                return
        
        # Step 5: Show cost estimate
        demo.display_cost_estimate(video, provider_id, target_language)
        
        # Step 6: Confirm processing
        if args.auto or input("\nElind√≠tja a feldolgoz√°st? [I/n]: ").lower() not in ['n', 'nem']:
            # Step 7: Process video
            await demo.simulate_processing(video, provider_id, voice_id, target_language)
            
            # Step 8: Show results
            demo.display_results(video, provider_id, target_language)
            
            print(f"\nüéä K√∂sz√∂nj√ºk, hogy haszn√°lta a YouTube Dubbing szolg√°ltat√°st!")
            print(f"üí° Tipp: Haszn√°lja a Google TTS-t tov√°bbi 90% megtakar√≠t√°s√©rt!")
        else:
            print("‚è∏Ô∏è  Feldolgoz√°s megszak√≠tva.")
    
    except KeyboardInterrupt:
        print(f"\n\nüëã Kil√©p√©s... Viszl√°t!")
    except Exception as e:
        print(f"\n‚ùå Hiba t√∂rt√©nt: {e}")

if __name__ == "__main__":
    print("""
üñ•Ô∏è  CLI Workflow Demo - Interactive Dubbing
==========================================

Ez a demo szimul√°lja a magyar nyelv≈± CLI fel√ºletet a fejlett
TTS szolg√°ltat√≥ kiv√°laszt√°ssal √©s k√∂lts√©goptimaliz√°l√°ssal.

Funkci√≥k:
- üá≠üá∫ Magyar nyelv≈± interakt√≠v fel√ºlet  
- üé§ TTS szolg√°ltat√≥ kiv√°laszt√°s
- üí∞ K√∂lts√©g √∂sszehasonl√≠t√°s
- üé≠ Hang kiv√°laszt√°s
- üé¨ Teljes dubbing workflow szimul√°ci√≥

    """)
    
    asyncio.run(main())