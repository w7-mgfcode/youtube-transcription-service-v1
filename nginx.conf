# YouTube Transcription Service - Production Nginx Configuration

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 1G;  # Large file uploads for video processing

    # MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/m;
    limit_req_zone $binary_remote_addr zone=uploads:10m rate=1r/m;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Upstream backend
    upstream transcribe_backend {
        server transcribe:8000;
        keepalive 32;
    }

    # HTTP server (redirect to HTTPS)
    server {
        listen 80;
        server_name _;
        
        # Health check endpoint (allow HTTP)
        location /health {
            proxy_pass http://transcribe_backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Redirect all other traffic to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS server
    server {
        listen 443 ssl http2;
        server_name _;

        # SSL configuration
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        
        # Modern SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1d;
        ssl_stapling on;
        ssl_stapling_verify on;

        # Security headers
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header X-XSS-Protection "1; mode=block" always;

        # Health check endpoint
        location /health {
            proxy_pass http://transcribe_backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Quick timeout for health checks
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }

        # API endpoints with rate limiting
        location /v1/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://transcribe_backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Longer timeouts for video processing
            proxy_connect_timeout 10s;
            proxy_send_timeout 300s;
            proxy_read_timeout 1800s;  # 30 minutes for long jobs
            
            # Large request handling
            client_max_body_size 1G;
            client_body_timeout 60s;
            client_body_buffer_size 128k;
        }

        # File upload endpoints (stricter rate limiting)
        location ~ ^/v1/(transcribe|dub)$ {
            limit_req zone=uploads burst=5 nodelay;
            
            proxy_pass http://transcribe_backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Extended timeouts for video uploads
            proxy_connect_timeout 30s;
            proxy_send_timeout 600s;
            proxy_read_timeout 3600s;  # 1 hour for large uploads
            
            # Upload optimizations
            client_max_body_size 1G;
            client_body_timeout 300s;
            client_body_buffer_size 1M;
            proxy_request_buffering off;
        }

        # File download endpoints
        location ~ ^/v1/.*/download$ {
            proxy_pass http://transcribe_backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Download optimizations
            proxy_buffering off;
            proxy_cache off;
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 600s;  # 10 minutes for large downloads
        }

        # API documentation (Swagger UI)
        location /docs {
            proxy_pass http://transcribe_backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # OpenAPI schema
        location /openapi.json {
            proxy_pass http://transcribe_backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Cache schema for 1 hour
            add_header Cache-Control "public, max-age=3600";
        }

        # Admin endpoints (optional authentication)
        location /admin/ {
            # Uncomment to require HTTP basic auth
            # auth_basic "Admin Area";
            # auth_basic_user_file /etc/nginx/.htpasswd;
            
            limit_req zone=api burst=10 nodelay;
            
            proxy_pass http://transcribe_backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Root redirect to documentation
        location = / {
            return 302 /docs;
        }

        # 404 for everything else
        location / {
            return 404 '{"error": "Not found", "message": "Use /docs for API documentation"}';
            add_header Content-Type application/json;
        }
    }

    # Custom error pages
    error_page 413 /413.json;
    location = /413.json {
        return 413 '{"error": "Request entity too large", "message": "Maximum file size is 1GB"}';
        add_header Content-Type application/json;
        internal;
    }

    error_page 429 /429.json;
    location = /429.json {
        return 429 '{"error": "Too many requests", "message": "Rate limit exceeded, please try again later"}';
        add_header Content-Type application/json;
        internal;
    }

    error_page 502 503 504 /50x.json;
    location = /50x.json {
        return 502 '{"error": "Service unavailable", "message": "Backend service is temporarily unavailable"}';
        add_header Content-Type application/json;
        internal;
    }
}